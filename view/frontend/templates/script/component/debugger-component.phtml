<script>
    // @todo: Move to separate template
    const LokiComponentsStorage = {
        get() {
            const lokiCheckoutJson = localStorage.getItem('loki-checkout');
            if (!lokiCheckoutJson) {
                return {};
            }

            return JSON.parse(lokiCheckoutJson);
        },
        load(key) {
            const data = this.get();
            return data[key];
        },
        save(key, value) {
            const data = this.get();
            data[key] = value;
            const lokiCheckoutJson = JSON.stringify(data);
            localStorage.setItem('loki-checkout', lokiCheckoutJson);
        }
    }

    document.addEventListener('alpine:init', () => {
        Alpine.data('LokiComponentsDebugger', () => ({
            ...LokiComponentType,
            currentTab: '',
            components: [],
            init() {
                try {
                    this.components = Alpine.store('components').getComponents();
                } catch (e) {
                    console.error(e);
                }

                // @todo: Save currentTab in localStorage
                this.currentTab = LokiComponentsStorage.load('debugger.tab');
                if (!this.currentTab) {
                    this.currentTab = this.$root.querySelectorAll('[data-tab-name]')[0].getAttribute('data-tab-name');
                }

            },
            isSelected(tabName) {
                return tabName === this.currentTab;
            },
            buttonCssClass() {
                const tabName = this.$el.getAttribute('data-tab-name');
                if (this.isSelected(tabName)) {
                    return 'border-transparent bg-white';
                }

                return 'border-gray-200 bg-zinc-200';
            },
            tabCssClass() {
                const tabName = this.$el.getAttribute('data-tab-name');
                if (this.isSelected(tabName)) {
                    return '';
                }

                return 'hidden';
            },
            switchTab(event) {
                this.currentTab = event.target.getAttribute('data-tab-name');
                LokiComponentsStorage.save('debugger.tab', this.currentTab);
            }
        }));
    });
</script>
