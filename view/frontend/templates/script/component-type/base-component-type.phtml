<?php
declare(strict_types=1);

use Magento\Framework\View\Element\Template;
use Yireo\LokiComponents\Config\Config;
use Yireo\LokiComponents\Factory\ViewModelFactory;
use Yireo\LokiComponents\Util\ComponentUtil;

/** @var Template $block */
/** @var ViewModelFactory $viewModelFactory */
/** @var Config $config */
/** @var ComponentUtil $componentUtil */

$config = $viewModelFactory->create(Config::class);
$componentUtil = $viewModelFactory->create(ComponentUtil::class);
?>
<script>
    const LokiComponentFormKey = '<?= $componentUtil->getFormKey() ?>';

    [...document.getElementsByTagName('input')].forEach(function (element) {
        element.addEventListener("focus", (event) => {
            document.lastFocusElementId = event.target.id;
        });
    });

    const LokiComponentType = {
        id: '',
        name: '',
        elementId: '',
        blockId: '',
        field: null,
        targets: [],
        messages: [],
        value: null,
        originalValue: null,
        initActions: {
            loadInitialData() {
                const jsonData = JSON.parse(this.$root.getAttribute('x-init-data'));
                for ([key, value] of Object.entries(jsonData)) {
                    this[key] = value;
                }

                this.originalValue = this.value;

                this.field = this.$root.querySelectorAll('[data-type="field"]')[0];
            },
            register() {
                Alpine.store('components').add(this);
            },
            setValidation() {
                if (!this.field) {
                    return;
                }

                if (true === this.valid) {
                    this.field.removeAttribute('aria-invalid');
                } else {
                    this.field.setAttribute('aria-invalid', true);
                }

                this.$watch('valid', () => {
                    if (true === this.valid) {
                        this.field.removeAttribute('aria-invalid');
                    } else {
                        this.field.setAttribute('aria-invalid', true);
                    }
                })
            },
        },
        beforeInit() {
        },
        async init() {
            this.beforeInit();

            for ([key, callback] of Object.entries(this.initActions)) {
                await callback.apply(this);
            }

            this.afterInit();
        },
        afterInit() {
        },
        hasChanges() {
            return this.value !== this.originalValue;
        },
        async post(value) {
            if (value instanceof Event) {
                value = null;
            }

            if (!value) {
                value = this.value;
            }

            if (this.field) {
                this.field.setAttribute('aria-busy', true);
                this.field.setAttribute('disabled', true);
            }

            this.targets.forEach(target => {
                const targetElement = document.getElementById(target);
                if (targetElement) {
                    targetElement.setAttribute('aria-busy', true);
                } else {
                    <?php if ($config->isDebug()): ?>
                    console.log('Target element "' + target + '" does not exist');
                    <?php endif; ?>
                }
            });

            this.originalValue = this.value;

            await fetch('<?= $componentUtil->getPostUrl() ?>?form_key=' + LokiComponentFormKey + '&isAjax=true', {
                method: 'POST',
                mode: 'same-origin',
                headers: {
                    'X-Alpine-Request': true,
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    targets: this.targets,
                    componentData: value,
                    block: this.blockId,
                    handles: <?= json_encode($componentUtil->getHandles($block)) ?>,
                    request: <?= json_encode($componentUtil->getRequestParams()) ?>,
                })
            })
                .then(response => {
                    return response.text()
                })
                .then(html => {
                    try {
                        const data = JSON.parse(html);
                        if (data) {
                            this.handleJson(data);
                            return;
                        }
                    } catch (e) {
                    }

                    const parser = new DOMParser();
                    const ajaxDocument = parser.parseFromString(html, "text/html");
                    this.targets.forEach(target => {
                        if (target === this.elementId) {
                            return;
                        }

                        const targetElement = document.getElementById(target);
                        const newTargetElement = ajaxDocument.getElementById(target);

                        if (!targetElement || !newTargetElement) {
                            return;
                        }

                        targetElement.outerHTML = newTargetElement.outerHTML;
                    });


                    const newTargetElement = ajaxDocument.getElementById(this.elementId);
                    if (!newTargetElement) {
                        return;
                    }

                    const targetElement = document.getElementById(this.elementId);
                    targetElement.innerHTML = newTargetElement.innerHTML;
                    targetElement.removeAttribute('aria-busy');
                    targetElement.setAttribute('x-init-data', newTargetElement.getAttribute('x-init-data'));

                    const jsonData = JSON.parse(targetElement.getAttribute('x-init-data'));
                    for ([key, value] of Object.entries(jsonData)) {
                        this[key] = value;
                    }

                    //this.value = this.originalValue;

                    if (document.lastFocusElementId) {
                        document.getElementById(document.lastFocusElementId).focus();
                    }
                })
                .catch(error => {
                    console.log(error)
                })
                .finally(() => {
                    if (this.field) {
                        this.field.removeAttribute('aria-busy');
                        this.field.removeAttribute('disabled');
                    }
                });
        },
        handleJson(data) {
            if (data.redirect) {
                window.location = data.redirect;
            }
        },
        getDetailsString() {
            return JSON.stringify(this.getDetails());
        },
        getDetails() {
            return {
                value: this.value,
            };
        }
    }
</script>
