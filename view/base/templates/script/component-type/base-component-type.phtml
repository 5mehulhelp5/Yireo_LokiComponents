<?php declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Loki\Components\Config\Config;
use Loki\Components\Factory\ViewModelFactory;
use Loki\Components\Util\ComponentUtil;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelFactory $viewModelFactory */
/** @var Config $config */
/** @var ComponentUtil $componentUtil */
$config = $viewModelFactory->create(Config::class);
$componentUtil = $viewModelFactory->create(ComponentUtil::class);
?>
<script>
    const LokiComponentFormKey = '<?= $escaper->escapeJs(
        $componentUtil->getFormKey()
    ) ?>';
    const LokiComponentAbortControllers = {};

    const LokiComponentType = {
        ...LokiLoadDataComponentPartial,
        ...LokiLoadInitMethodsComponentPartial,
        ...LokiLoadDestroyMethodsComponentPartial,
        ...LokiLoaderComponentPartial,
        id: '',
        name: '',
        elementId: '',
        blockId: '',
        targets: [],
        messages: [],
        messageArea: 'local',
        value: null,
        visible: false,
        lazyLoad: false,
        ajax: false,
        beforePostValue: null,
        autofillListenerTimer: null,
        async init() {
            this.loadData();
            this.loadInitMethods();
        },
        initComponentRegistration() {
            Alpine.store('components').add(this);
        },
        initLazyLoading() {
            if (this.lazyLoad) {
                this.post({});
            }
        },
        async post(value) {
            if (value instanceof Event) {
                value = null;
            }

            if (!value) {
                value = this.value;
            }

            this.handleAbortControllerOnPost();
            this.loading = true;
            this.setTargetStateOnPost();
            this.beforePostValue = this.value;

            const showLoaderTimerId = setTimeout(() => {
                this.showLoader = true;
            }, this.showLoaderTimeout);

            const abortController = this.getAbortController();
            const bodyData = this.getBodyData();
            bodyData.componentData = value;

            await fetch('<?= /* @noEscape */ $componentUtil->getPostUrl(
            ) ?>?form_key=' + LokiComponentFormKey + '&isAjax=true', {
                method: 'POST',
                mode: 'same-origin',
                signal: abortController.signal,
                headers: this.getPostHeaders(),
                body: JSON.stringify(bodyData)
            })
                .then(response => {
                    if (response.ok) {
                        return response.text()
                    }

                    LokiComponentsLogger.error('Fetch error', response);
                    throw new Error(response.statusText);
                })
                .then(html => {
                    try {
                        const data = JSON.parse(html);
                        if (data) {
                            this.handleJson(data);
                            return;
                        }
                    } catch (e) {
                    }

                    this.updateTargetsAfterPost(html);

                    if (!this.valid) {
                        this.value = this.beforePostValue;
                    }

                    this.$nextTick(() => {
                        document.dispatchEvent(new CustomEvent('loki-components.component.update', {
                            detail: {
                                component: this
                            }
                        }));

                        if (document.lastFocusElementId) {
                            document.getElementById(document.lastFocusElementId).focus();
                        }
                    });
                })
                .catch(error => {
                    if (error === 'Duplicate request') {
                        return;
                    }

                    this.addGlobalMessage('error', error);
                })
                .finally(() => {
                    this.$nextTick(() => {
                        this.setTargetStateAfterPost();
                    });

                    this.loading = false;
                    this.showLoader = false;
                    clearTimeout(showLoaderTimerId);
                    LokiComponentsFocusListener();
                });
        },
        getAbortController() {
            if (!LokiComponentAbortControllers[this.id]) {
                LokiComponentAbortControllers[this.id] = new AbortController();
            }

            return LokiComponentAbortControllers[this.id];
        },
        handleAbortControllerOnPost() {
            let abortController = this.getAbortController();
            if (this.loading && abortController.signal) {
                abortController.abort('Duplicate request');
                LokiComponentAbortControllers[this.id] = new AbortController();
            }
        },
        setTargetStateOnPost() {
            this.targets.forEach(target => {
                this.setLoadingStateToElement(target, true);
            });
        },
        setTargetStateAfterPost() {
            this.targets.forEach(target => {
                this.setLoadingStateToElement(target, false);
            });
        },
        getPostHeaders() {
            return {
                'X-Alpine-Request': true,
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
            };
        },
        getBodyData() {
            return {
                targets: this.targets,
                block: this.blockId,
                handles: <?= /** @noEscape */ json_encode(
                    $componentUtil->getHandles($block)
                ) ?>,
                currentUri: '<?= $escaper->escapeJs(
                    $componentUtil->getCurrentUri()
                ) ?>',
                request: <?= /** @noEscape */ json_encode(
                    $componentUtil->getRequestParams()
                ) ?>,
            };
        },
        updateTargetsAfterPost(html) {
            const parser = new DOMParser();
            const ajaxDocument = parser.parseFromString(html, "text/html");

            this.targets.forEach(target => {
                const targetElement = document.getElementById(target);
                const newTargetElement = ajaxDocument.getElementById(target);

                if (!targetElement || !newTargetElement) {
                    return;
                }

                const targetComponent = Alpine.store('components').getComponentByElementId(target);
                if (targetComponent) {
                    targetComponent.destroy();
                }

                targetElement.outerHTML = newTargetElement.outerHTML;
            });
        },
        setValue(event) {
            this.value = event.target.value;
        },
        notLoading() {
            return !this.loading;
        },
        handleJson(data) {
            if (data.error) {
                LokiComponentsLogger.error(data.error);
                this.addGlobalMessage('error', data.error);
            }

            if (data.redirect) {
                document.location.assign(data.redirect);
            }
        },
        getDetailsString() {
            console.log(this.elementId, this.getDetails());
            return JSON.stringify(this.getDetails());
        },
        getDetails() {
            return {
                value: this.value,
                visible: this.visible,
                valid: this.valid,
            };
        },
        addGlobalSuccess(messageText) {
            this.addGlobalMessage('success', messageText);
        },
        addGlobalNotice(messageText) {
            this.addGlobalMessage('notice', messageText);
        },
        addGlobalWarning(messageText) {
            this.addGlobalMessage('warning', messageText);
        },
        addGlobalError(messageText) {
            this.addGlobalMessage('error', messageText);
        },
        addGlobalMessage(messageType, messageText) {
            const globalMessageComponent = Alpine.store('components').get('LokiComponentsGlobalMessages');
            globalMessageComponent.messages.push({
                type: messageType,
                text: messageText
            });
        },
        addLocalSuccess(messageText) {
            this.addLocalMessage('success', messageText);
        },
        addLocalNotice(messageText) {
            this.addLocalMessage('notice', messageText);
        },
        addLocalWarning(messageText) {
            this.addLocalMessage('warning', messageText);
        },
        addLocalError(messageText) {
            this.addLocalMessage('error', messageText);
        },
        addLocalMessage(messageType, messageText) {
            this.messages.push({type: messageType, text: messageText});
        },
        addMessage(messageType, messageText) {
            if (this.messageArea === 'global') {
                return this.addGlobalMessage(messageType, messageText);
            }

            return this.addLocalMessage(messageType, messageText);
        },
        addError(messageText) {
            this.addMessage('error', messageText);
        },
        hasLocalMessages() {
            return this.messages.length > 0;
        },
        destroy() {
            this.loadDestroyMethods();
        },
        destroyAutofillListener() {
            clearInterval(this.autofillListenerTimer);
        }
    }
</script>
