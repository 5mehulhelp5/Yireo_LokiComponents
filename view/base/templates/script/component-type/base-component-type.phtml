<?php
declare(strict_types=1);

use Magento\Framework\View\Element\Template;
use Loki\Components\Config\Config;
use Loki\Components\Factory\ViewModelFactory;
use Loki\Components\Util\ComponentUtil;

/** @var Template $block */
/** @var ViewModelFactory $viewModelFactory */
/** @var Config $config */
/** @var ComponentUtil $componentUtil */

$config = $viewModelFactory->create(Config::class);
$componentUtil = $viewModelFactory->create(ComponentUtil::class);
?>
<script>
    const LokiComponentFormKey = '<?= $componentUtil->getFormKey() ?>';

    const LokiComponentType = {
        ...LokiDataLoaderComponentPartial,
        id: '',
        name: '',
        elementId: '',
        blockId: '',
        targets: [],
        messages: [],
        value: null,
        visible: false,
        loading: false,
        showLoader: false,
        showLoaderTimeout: 700,
        lazyLoad: false,
        beforePostValue: null,
        autofillListenerTimer: null,
        async init() {
            this.loadData();

            const initMethods = Object.getOwnPropertyNames(this).filter((methodName) => {
                return methodName.startsWith('init') && methodName !== 'init';
            });

            initMethods.forEach(methodName => {
                this[methodName].apply(this);
            })
        },
        initComponentRegistration() {
            Alpine.store('components').add(this);
        },
        initLazyLoading() {
            if (this.lazyLoad) {
                this.post({});
            }
        },
        async post(value) {
            if (value instanceof Event) {
                value = null;
            }

            if (!value) {
                value = this.value;
            }

            this.loading = true;

            this.targets.forEach(target => {
                const targetElement = document.getElementById(target);
                if (targetElement) {
                    targetElement.setAttribute('aria-busy', true);
                }

                const targetComponent = Alpine.store('components').getComponentByElementId(target);
                if (targetComponent) {
                    targetComponent.loading = true;
                }
            });

            this.beforePostValue = this.value;

            const showLoaderTimerId = setTimeout(() => {
                this.showLoader = true;
            }, this.showLoaderTimeout);

            await fetch('<?= $componentUtil->getPostUrl() ?>?form_key=' + LokiComponentFormKey + '&isAjax=true', {
                method: 'POST',
                mode: 'same-origin',
                headers: {
                    'X-Alpine-Request': true,
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    targets: this.targets,
                    componentData: value,
                    block: this.blockId,
                    handles: <?= json_encode($componentUtil->getHandles($block)) ?>,
                    currentUri: '<?= $componentUtil->getCurrentUri() ?>',
                    request: <?= json_encode($componentUtil->getRequestParams()) ?>,
                })
            })
                .then(response => {
                    if (response.ok) {
                        return response.text()
                    }

                    LokiComponentsLogger.error('Fetch error', response);
                    throw new Error(response.statusText);
                })
                .then(html => {
                    try {
                        const data = JSON.parse(html);
                        if (data) {
                            this.handleJson(data);
                            return;
                        }
                    } catch (e) {
                    }

                    const parser = new DOMParser();
                    const ajaxDocument = parser.parseFromString(html, "text/html");
                    this.targets.forEach(target => {
                        const targetElement = document.getElementById(target);
                        const newTargetElement = ajaxDocument.getElementById(target);

                        if (!targetElement || !newTargetElement) {
                            return;
                        }

                        const targetComponent = Alpine.store('components').getComponentByElementId(target);
                        if (targetComponent) {
                            targetComponent.destroy();
                        }

                        targetElement.outerHTML = newTargetElement.outerHTML;
                    });

                    if (!this.valid) {
                        this.value = this.beforePostValue;
                    }

                    this.$nextTick(() => {
                        document.dispatchEvent(new CustomEvent('loki-components.component.update', {detail: {component: this}}));

                        if (document.lastFocusElementId) {
                            document.getElementById(document.lastFocusElementId).focus();
                        }
                    });
                })
                .catch(error => {
                    this.addGlobalMessage('error', error);
                })
                .finally(() => {
                    this.$nextTick(() => {
                        this.targets.forEach(target => {
                            const targetElement = document.getElementById(target);
                            if (targetElement) {
                                targetElement.removeAttribute('aria-busy');
                            } else {
                                LokiComponentsLogger.error('Target not found', target);
                            }
                        });
                    });

                    this.loading = false;
                    this.showLoader = false;
                    clearTimeout(showLoaderTimerId);

                    LokiComponentsFocusListener();
                });
        },
        setValue(event) {
            this.value = event.target.value;
        },
        notLoading() {
            return !this.loading;
        },
        handleJson(data) {
            if (data.error) {
                LokiComponentsLogger.error(data.error);
                this.addGlobalMessage('error', data.error);
            }

            if (data.redirect) {
                console.log('Redirecting to ' + data.redirect);
                document.location.assign(data.redirect);
                //window.location.replace(data.redirect); // @todo
            }
        },
        getDetailsString() {
            console.log(this.elementId, this.getDetails());
            return JSON.stringify(this.getDetails());
        },
        getDetails() {
            return {
                value: this.value,
                visible: this.visible,
                valid: this.valid,
            };
        },
        addGlobalSuccess(messageText) {
            this.addGlobalMessage('success',  messageText);
        },
        addGlobalNotice(messageText) {
            this.addGlobalMessage('notice',  messageText);
        },
        addGlobalWarning(messageText) {
            this.addGlobalMessage('warning',  messageText);
        },
        addGlobalError(messageText) {
            this.addGlobalMessage('error',  messageText);
        },
        addGlobalMessage(messageType, messageText) {
            const globalMessageComponent = Alpine.store('components').get('LokiComponentsGlobalMessages');
            globalMessageComponent.messages.push({
                type: messageType,
                text: messageText
            });
        },
        destroyActions: {
            clearAutofillListenerTimer() {
                clearInterval(this.autofillListenerTimer);
            }
        },
        async destroy() {
            for ([key, callback] of Object.entries(this.destroyActions)) {
                await callback.apply(this);
            }
        }
    }
</script>
